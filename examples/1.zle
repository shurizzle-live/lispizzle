(define name "scheme")

(set! name "lispizzle")

(println "I â™¥" name)

(println
  ;; this is a
  "1 - 2 + 3 ="
  ;; comment
  (+ (- 1 2) 3))

;; test eval
(println
  "eval in current environment"
  '(+ (- 1 2) 3)
  "="
  (eval '(+ (- 1 2) 3) (current-environment)))

;; test primitive-eval (no need to pass the environment)
(println
  "primitive-eval"
  '(+ (- 1 2) 3)
  "="
  (primitive-eval '(+ (- 1 2) 3)))

;; test quasiquote with unquote
(println "`(1 2 ,(+ 1 2)) =" `(1 2 ,(+ 1 2)))

;; test quasiquote with unquote-splicing
(println "`(1 ,@`(2 ,(+ 1 2))) =" `(1 ,@`(2 ,(+ 1 2))))

;; get procedure name
(print       (procedure-name +))
;; get procedure documentation
(println ":" (procedure-documentation +))

(println (if #f "this is gone to print #<unspecified>"))
(println (if #f #nil "Hello, I'm the `else` branch"))
(println (if #t "Hello, I'm the `then` branch" "Hello, I'm the `else` branch"))

;; call sum with apply
(println "(apply + '(1 2 3)) =" (apply + '(1 2 3)))

;; vim:ft=scheme
