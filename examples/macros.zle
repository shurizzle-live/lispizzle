(def defmacro (macro (name &rest)
  `(def ,name (macro ,@rest))))

(defmacro defn (name &rest)
  `(def ,name (fn ,@rest)))

(defn test ()
  "this is a test"
  (let (t "calling test")
    (println t)))

(println (fn-name test))
(println (fn-doc  test))

(test)

(def x 2)

(println (primitive-eval '(+ x 1)))

(println (macroexpand '(primitive-eval '(+ x 1))))

(defn 1+ (n)
  (+ 1 n))

(defmacro inc (name)
  `(set! ,name (1+ ,name)))

(defmacro ++ (name)
  (let (curr (gensym))
    `(let (,curr ,name)
       (inc ,name)
       ,curr)))

(println (++ x))
(println x)

;; vim:ft=scheme
