(defn test ()
  "this is a test"
  (let (t "calling test")
    (println t)))

(println (fn-name test))
(println (fn-doc  test))

(test)

(def x 2)

(println (primitive-eval '(+ x 1)))

(println (macroexpand '(primitive-eval '(+ x 1))))

(defmacro ++ (name)
  (let (curr (gensym))
    `(let (,curr ,name)
       (inc ,name)
       ,curr)))

(println (++ x))
(println x)

(defn $while (cond body env)
      (if (eval cond env)
        (begin
          (println "parent:" (1 (backtrace)))
          (eval body env)
          ($while cond body env))))

(defmacro while (cond &body)
  `($while ',cond '(begin ,@body) (current-environment)))

(def x 0)
(while (< x 10)
       (println x)
       (inc x))
(println x)

;; vim:ft=scheme
